import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../hooks/useAuth';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRoles?: string[];\n  fallback?: React.ReactNode;\n}\n\ninterface AccessDeniedProps {\n  message?: string;\n}\n\nconst AccessDenied: React.FC<AccessDeniedProps> = ({\n  message = 'You do not have permission to access this resource',\n}) => (\n  <div className=\"min-h-screen bg-white flex items-center justify-center px-4\">\n    <div className=\"max-w-md text-center space-y-6\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-4xl font-700 text-black\">Access Denied</h1>\n        <p className=\"text-lg font-400 text-gray-600\">{message}</p>\n      </div>\n      <a\n        href=\"/app/dashboard\"\n        className=\"inline-block px-6 py-3 bg-black text-white rounded-lg font-500 hover:bg-gray-800 transition-colors\"\n      >\n        Return to Dashboard\n      </a>\n    </div>\n  </div>\n);\n\nconst LoadingFallback: React.FC = () => (\n  <div className=\"min-h-screen bg-white flex items-center justify-center\">\n    <div className=\"space-y-4 text-center\">\n      <div className=\"w-12 h-12 border-4 border-gray-200 border-t-black rounded-full animate-spin mx-auto\" />\n      <p className=\"text-gray-600 font-400\">Loading...</p>\n    </div>\n  </div>\n);\n\n/**\n * ProtectedRoute component for role-based access control\n * Supports multi-tenant authorization with organization context\n */\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = ({\n  children,\n  requiredRoles,\n  fallback,\n}) => {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const location = useLocation();\n\n  // Show loading state\n  if (isLoading) {\n    return fallback || <LoadingFallback />;\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // Check role-based access if requiredRoles specified\n  if (requiredRoles && user && !requiredRoles.includes(user.role)) {\n    return (\n      <AccessDenied message={`This page requires one of these roles: ${requiredRoles.join(', ')}`} />\n    );\n  }\n\n  // Render protected content\n  return <>{children}</>;\n};\n\n/**\n * Hook to check if user has specific role\n */\nexport const useHasRole = (roles: string[]): boolean => {\n  const { user } = useAuth();\n  return user ? roles.includes(user.role) : false;\n};\n\n/**\n * Hook to check if user has specific permission\n */\nexport const useHasPermission = (permission: string): boolean => {\n  const { user } = useAuth();\n  if (!user) return false;\n\n  // Check if user has explicit permission\n  const permissions = user.permissions || [];\n  return permissions.includes(permission) || permissions.includes('*');\n};\n\n/**\n * Hook to get current tenant organization ID\n */\nexport const useOrganizationId = (): string | null => {\n  const { user } = useAuth();\n  // In multi-tenant apps, organization ID is typically part of user context\n  // This would come from a cookie, token claim, or session\n  return null; // Implementation depends on how tenants are tracked\n};\n\n/**\n * Higher-order component for functional components\n */\nexport const withProtection = <P extends object>(\n  Component: React.FC<P>,\n  requiredRoles?: string[]\n): React.FC<P> => {\n  return (props: P) => (\n    <ProtectedRoute requiredRoles={requiredRoles}>\n      <Component {...props} />\n    </ProtectedRoute>\n  );\n};\n