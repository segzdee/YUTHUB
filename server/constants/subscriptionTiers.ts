/**\n * Subscription Tiers and Feature Definitions\n * Defines the complete SaaS pricing model for YUTHUB\n */\n\nexport type SubscriptionTier = 'trial' | 'starter' | 'professional' | 'enterprise';\nexport type SubscriptionStatus = 'trial' | 'active' | 'past_due' | 'cancelled' | 'paused';\nexport type UserRole = 'admin' | 'manager' | 'staff' | 'resident' | 'support_worker';\n\n/**\n * Feature Flags that control access to functionality\n */\nexport interface FeatureFlags {\n  // Core Features\n  basicReporting: boolean;\n  progressTracking: boolean;\n  emailSupport: boolean;\n  mobileApp: boolean;\n\n  // Professional Features\n  multiProperty: boolean;\n  advancedAnalytics: boolean;\n  crisisConnect: boolean;\n  gamification: boolean;\n  dedicatedManager: boolean;\n\n  // Enterprise Features\n  aiPoweredInsights: boolean;\n  apiAccess: boolean;\n  whiteLabelBranding: boolean;\n  ssoSamlLdap: boolean;\n  customFeatureDevelopment: boolean;\n  onPremiseDeployment: boolean;\n  advancedIntegrations: boolean;\n  twentyFourSevenSupport: boolean;\n  trainingPrograms: boolean;\n  slaGuarantees: boolean;\n}\n\n/**\n * Subscription Tier Definitions with pricing and limits\n */\nexport const SUBSCRIPTION_TIERS = {\n  trial: {\n    name: 'Trial',\n    description: 'Free trial period before choosing a plan',\n    monthlyPrice: 0,\n    annualPrice: 0,\n    currency: 'GBP',\n    trialDays: 14,\n    trialAutoConvertTo: 'starter',\n    limits: {\n      maxResidents: 25,\n      maxProperties: 1,\n    },\n    supportLevel: 'email',\n    supportHours: 'business_hours', // Monday-Friday 9am-5pm\n    features: {\n      // Core Features\n      basicReporting: true,\n      progressTracking: true,\n      emailSupport: true,\n      mobileApp: true,\n\n      // Professional Features (not included)\n      multiProperty: false,\n      advancedAnalytics: false,\n      crisisConnect: false,\n      gamification: false,\n      dedicatedManager: false,\n\n      // Enterprise Features (not included)\n      aiPoweredInsights: false,\n      apiAccess: false,\n      whiteLabelBranding: false,\n      ssoSamlLdap: false,\n      customFeatureDevelopment: false,\n      onPremiseDeployment: false,\n      advancedIntegrations: false,\n      twentyFourSevenSupport: false,\n      trainingPrograms: false,\n      slaGuarantees: false,\n    } as FeatureFlags,\n  },\n  starter: {\n    name: 'Starter',\n    description: 'Perfect for small charities and pilot projects',\n    monthlyPrice: 199,\n    annualPrice: 169,\n    currency: 'GBP',\n    limits: {\n      maxResidents: 25,\n      maxProperties: 1,\n    },\n    supportLevel: 'email',\n    supportHours: 'business_hours',\n    features: {\n      // Core Features\n      basicReporting: true,\n      progressTracking: true,\n      emailSupport: true,\n      mobileApp: true,\n\n      // Professional Features (not included)\n      multiProperty: false,\n      advancedAnalytics: false,\n      crisisConnect: false,\n      gamification: false,\n      dedicatedManager: false,\n\n      // Enterprise Features (not included)\n      aiPoweredInsights: false,\n      apiAccess: false,\n      whiteLabelBranding: false,\n      ssoSamlLdap: false,\n      customFeatureDevelopment: false,\n      onPremiseDeployment: false,\n      advancedIntegrations: false,\n      twentyFourSevenSupport: false,\n      trainingPrograms: false,\n      slaGuarantees: false,\n    } as FeatureFlags,\n  },\n  professional: {\n    name: 'Professional',\n    description: 'For medium-sized housing organizations',\n    monthlyPrice: 499,\n    annualPrice: 429,\n    currency: 'GBP',\n    limits: {\n      maxResidents: 100,\n      maxProperties: 5,\n    },\n    supportLevel: 'priority',\n    supportHours: 'business_hours',\n    features: {\n      // Core Features\n      basicReporting: true,\n      progressTracking: true,\n      emailSupport: true,\n      mobileApp: true,\n\n      // Professional Features (all included)\n      multiProperty: true,\n      advancedAnalytics: true,\n      crisisConnect: true,\n      gamification: true,\n      dedicatedManager: true,\n\n      // Enterprise Features (not included)\n      aiPoweredInsights: false,\n      apiAccess: false,\n      whiteLabelBranding: false,\n      ssoSamlLdap: false,\n      customFeatureDevelopment: false,\n      onPremiseDeployment: false,\n      advancedIntegrations: false,\n      twentyFourSevenSupport: false,\n      trainingPrograms: false,\n      slaGuarantees: false,\n    } as FeatureFlags,\n  },\n  enterprise: {\n    name: 'Enterprise',\n    description: 'For national providers and large institutions',\n    monthlyPrice: 1299,\n    annualPrice: 1099,\n    currency: 'GBP',\n    limits: {\n      maxResidents: -1, // Unlimited\n      maxProperties: -1, // Unlimited\n    },\n    supportLevel: '24/7',\n    supportHours: '24/7',\n    features: {\n      // Core Features\n      basicReporting: true,\n      progressTracking: true,\n      emailSupport: true,\n      mobileApp: true,\n\n      // Professional Features (all included)\n      multiProperty: true,\n      advancedAnalytics: true,\n      crisisConnect: true,\n      gamification: true,\n      dedicatedManager: true,\n\n      // Enterprise Features (all included)\n      aiPoweredInsights: true,\n      apiAccess: true,\n      whiteLabelBranding: true,\n      ssoSamlLdap: true,\n      customFeatureDevelopment: true,\n      onPremiseDeployment: true,\n      advancedIntegrations: true,\n      twentyFourSevenSupport: true,\n      trainingPrograms: true,\n      slaGuarantees: true,\n    } as FeatureFlags,\n  },\n} as const;\n\n/**\n * Get tier configuration by tier name\n */\nexport function getTierConfig(tier: SubscriptionTier) {\n  return SUBSCRIPTION_TIERS[tier] || SUBSCRIPTION_TIERS.trial;\n}\n\n/**\n * Check if a tier has a specific feature\n */\nexport function tierHasFeature(\n  tier: SubscriptionTier,\n  feature: keyof FeatureFlags\n): boolean {\n  const config = getTierConfig(tier);\n  return (config.features[feature] as boolean) ?? false;\n}\n\n/**\n * Get list of all features available in a tier\n */\nexport function getTierFeatures(\n  tier: SubscriptionTier\n): (keyof FeatureFlags)[] {\n  const config = getTierConfig(tier);\n  return (Object.keys(config.features) as (keyof FeatureFlags)[]).filter(\n    (feature) => config.features[feature]\n  );\n}\n\n/**\n * Determine if an organization can access a module\n */\nexport function canAccessModule(\n  subscriptionTier: SubscriptionTier,\n  moduleName: string\n): boolean {\n  const moduleFeatureMap: Record<string, keyof FeatureFlags> = {\n    analytics: 'advancedAnalytics',\n    crisis: 'crisisConnect',\n    gamification: 'gamification',\n    api: 'apiAccess',\n    branding: 'whiteLabelBranding',\n    sso: 'ssoSamlLdap',\n  };\n\n  const requiredFeature = moduleFeatureMap[moduleName];\n  if (!requiredFeature) return true; // Default to true if not restricted\n\n  return tierHasFeature(subscriptionTier, requiredFeature);\n}\n\n/**\n * Module access control matrix\n */\nexport const MODULE_ACCESS = {\n  dashboard: { trial: true, starter: true, professional: true, enterprise: true },\n  housing: { trial: true, starter: true, professional: true, enterprise: true },\n  support: { trial: true, starter: true, professional: true, enterprise: true },\n  independence: { trial: true, starter: true, professional: true, enterprise: true },\n  safeguarding: { trial: true, starter: true, professional: true, enterprise: true },\n  crisis: { trial: false, starter: false, professional: true, enterprise: true },\n  financials: { trial: true, starter: true, professional: true, enterprise: true },\n  analytics: { trial: false, starter: false, professional: true, enterprise: true },\n  billing: { trial: true, starter: true, professional: true, enterprise: true },\n  forms: { trial: true, starter: true, professional: true, enterprise: true },\n  reports: { trial: false, starter: false, professional: true, enterprise: true },\n  settings: { trial: true, starter: true, professional: true, enterprise: true },\n} as const;\n\n/**\n * Billing cycle types\n */\nexport const BILLING_CYCLES = {\n  monthly: 'monthly',\n  annual: 'annual',\n} as const;\n\n/**\n * Subscription statuses\n */\nexport const SUBSCRIPTION_STATUSES = {\n  trial: 'trial',\n  active: 'active',\n  past_due: 'past_due',\n  cancelled: 'cancelled',\n  paused: 'paused',\n} as const;\n\n/**\n * User roles with descriptions\n */\nexport const USER_ROLES = {\n  admin: {\n    name: 'Administrator',\n    description: 'Full control over organization, billing, staff management',\n    permissions: [\n      'manage_staff',\n      'manage_billing',\n      'manage_organization',\n      'view_analytics',\n      'manage_residents',\n      'manage_properties',\n    ],\n  },\n  manager: {\n    name: 'Manager / Coordinator',\n    description: 'Oversees housing, staff activities, incidents, and reporting',\n    permissions: [\n      'manage_staff',\n      'manage_residents',\n      'manage_properties',\n      'view_analytics',\n      'create_incidents',\n    ],\n  },\n  staff: {\n    name: 'Support Worker',\n    description: 'Works directly with residents, creates support plans',\n    permissions: [\n      'manage_assigned_residents',\n      'create_support_plans',\n      'log_activities',\n      'view_own_residents',\n    ],\n  },\n  resident: {\n    name: 'Resident',\n    description: 'Self-service portal for viewing plans and tracking goals',\n    permissions: ['view_own_data', 'view_own_plans', 'view_own_progress'],\n  },\n  support_worker: {\n    name: 'Support Worker',\n    description: 'Crisis support and emergency response staff',\n    permissions: ['create_incidents', 'manage_crisis_alerts', 'view_residents'],\n  },\n} as const;\n\n/**\n * Alert thresholds for resident/property limits\n */\nexport const LIMIT_ALERT_THRESHOLDS = {\n  warning: 0.8, // Alert when 80% of limit reached\n  critical: 0.95, // Critical alert at 95%\n} as const;\n"