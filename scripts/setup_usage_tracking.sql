-- ============================================\n-- Resident and Property Count Tracking\n-- ============================================\n-- This script sets up database triggers to automatically\n-- update resident and property counts when records are added/removed\n\n-- Function to update organization resident count\nCREATE OR REPLACE FUNCTION update_resident_count()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF TG_OP = 'INSERT' THEN\n    UPDATE organizations\n    SET current_resident_count = current_resident_count + 1\n    WHERE id = NEW.organization_id;\n    RETURN NEW;\n  ELSIF TG_OP = 'DELETE' THEN\n    UPDATE organizations\n    SET current_resident_count = GREATEST(0, current_resident_count - 1)\n    WHERE id = OLD.organization_id;\n    RETURN OLD;\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger for resident insert/delete\nDROP TRIGGER IF EXISTS trigger_update_resident_count ON residents;\nCREATE TRIGGER trigger_update_resident_count\nAFTER INSERT OR DELETE ON residents\nFOR EACH ROW\nEXECUTE FUNCTION update_resident_count();\n\n-- Function to update organization property count\nCREATE OR REPLACE FUNCTION update_property_count()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF TG_OP = 'INSERT' THEN\n    UPDATE organizations\n    SET current_property_count = current_property_count + 1\n    WHERE id = NEW.organization_id;\n    RETURN NEW;\n  ELSIF TG_OP = 'DELETE' THEN\n    UPDATE organizations\n    SET current_property_count = GREATEST(0, current_property_count - 1)\n    WHERE id = OLD.organization_id;\n    RETURN OLD;\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger for property insert/delete\nDROP TRIGGER IF EXISTS trigger_update_property_count ON properties;\nCREATE TRIGGER trigger_update_property_count\nAFTER INSERT OR DELETE ON properties\nFOR EACH ROW\nEXECUTE FUNCTION update_property_count();\n\n-- Function to check and update usage alerts\nCREATE OR REPLACE FUNCTION check_usage_alerts()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Check if we need to send an alert (80% of limit reached)\n  IF NEW.max_residents > 0 THEN\n    IF (NEW.current_resident_count::float / NEW.max_residents) >= 0.8 THEN\n      NEW.usage_alert_sent = true;\n      NEW.last_usage_alert_date = NOW();\n    ELSIF (NEW.current_resident_count::float / NEW.max_residents) < 0.8 THEN\n      NEW.usage_alert_sent = false;\n    END IF;\n  END IF;\n  \n  IF NEW.max_properties > 0 THEN\n    IF (NEW.current_property_count::float / NEW.max_properties) >= 0.8 THEN\n      NEW.usage_alert_sent = true;\n      NEW.last_usage_alert_date = NOW();\n    END IF;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger to check usage alerts on organization update\nDROP TRIGGER IF EXISTS trigger_check_usage_alerts ON organizations;\nCREATE TRIGGER trigger_check_usage_alerts\nBEFORE UPDATE ON organizations\nFOR EACH ROW\nWHEN (OLD.current_resident_count IS DISTINCT FROM NEW.current_resident_count\n   OR OLD.current_property_count IS DISTINCT FROM NEW.current_property_count)\nEXECUTE FUNCTION check_usage_alerts();\n\n-- Function to recalculate resident count for an organization\nCREATE OR REPLACE FUNCTION recalculate_resident_count(org_id integer)\nRETURNS integer AS $$\nDECLARE\n  resident_count integer;\nBEGIN\n  SELECT COUNT(*) INTO resident_count\n  FROM residents\n  WHERE organization_id = org_id AND status != 'moved_out';\n  \n  UPDATE organizations\n  SET current_resident_count = resident_count\n  WHERE id = org_id;\n  \n  RETURN resident_count;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Function to recalculate property count for an organization\nCREATE OR REPLACE FUNCTION recalculate_property_count(org_id integer)\nRETURNS integer AS $$\nDECLARE\n  property_count integer;\nBEGIN\n  SELECT COUNT(*) INTO property_count\n  FROM properties\n  WHERE organization_id = org_id AND status = 'active';\n  \n  UPDATE organizations\n  SET current_property_count = property_count\n  WHERE id = org_id;\n  \n  RETURN property_count;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- View for getting resident usage alerts\nCREATE OR REPLACE VIEW v_resident_usage_alerts AS\nSELECT\n  o.id as organization_id,\n  o.name as organization_name,\n  o.subscription_tier,\n  o.current_resident_count,\n  o.max_residents,\n  ROUND((o.current_resident_count::float / o.max_residents) * 100, 2) as usage_percent,\n  CASE\n    WHEN (o.current_resident_count::float / o.max_residents) >= 0.95 THEN 'CRITICAL'\n    WHEN (o.current_resident_count::float / o.max_residents) >= 0.8 THEN 'WARNING'\n    ELSE 'OK'\n  END as alert_level,\n  o.last_usage_alert_date,\n  o.usage_alert_sent\nFROM organizations o\nWHERE o.max_residents > 0\nORDER BY usage_percent DESC;\n\n-- View for getting property usage alerts\nCREATE OR REPLACE VIEW v_property_usage_alerts AS\nSELECT\n  o.id as organization_id,\n  o.name as organization_name,\n  o.subscription_tier,\n  o.current_property_count,\n  o.max_properties,\n  ROUND((o.current_property_count::float / o.max_properties) * 100, 2) as usage_percent,\n  CASE\n    WHEN (o.current_property_count::float / o.max_properties) >= 0.95 THEN 'CRITICAL'\n    WHEN (o.current_property_count::float / o.max_properties) >= 0.8 THEN 'WARNING'\n    ELSE 'OK'\n  END as alert_level,\n  o.last_usage_alert_date,\n  o.usage_alert_sent\nFROM organizations o\nWHERE o.max_properties > 0\nORDER BY usage_percent DESC;\n\n-- View combining both alerts\nCREATE OR REPLACE VIEW v_all_usage_alerts AS\nSELECT\n  o.id as organization_id,\n  o.name as organization_name,\n  o.subscription_tier,\n  o.billing_email,\n  o.current_resident_count,\n  o.max_residents,\n  ROUND((o.current_resident_count::float / NULLIF(o.max_residents, 0)) * 100, 2) as resident_usage_percent,\n  o.current_property_count,\n  o.max_properties,\n  ROUND((o.current_property_count::float / NULLIF(o.max_properties, 0)) * 100, 2) as property_usage_percent,\n  CASE\n    WHEN (o.current_resident_count::float / NULLIF(o.max_residents, 0)) >= 0.95 THEN 'CRITICAL'\n    WHEN (o.current_resident_count::float / NULLIF(o.max_residents, 0)) >= 0.8 THEN 'WARNING'\n    ELSE 'OK'\n  END as resident_alert_level,\n  CASE\n    WHEN (o.current_property_count::float / NULLIF(o.max_properties, 0)) >= 0.95 THEN 'CRITICAL'\n    WHEN (o.current_property_count::float / NULLIF(o.max_properties, 0)) >= 0.8 THEN 'WARNING'\n    ELSE 'OK'\n  END as property_alert_level,\n  o.last_usage_alert_date,\n  o.usage_alert_sent,\n  GREATEST(\n    ROUND((o.current_resident_count::float / NULLIF(o.max_residents, 0)) * 100, 2),\n    ROUND((o.current_property_count::float / NULLIF(o.max_properties, 0)) * 100, 2)\n  ) as max_usage_percent\nFROM organizations o\nWHERE o.subscription_status = 'active' OR o.subscription_status = 'trial'\nORDER BY max_usage_percent DESC;\n"