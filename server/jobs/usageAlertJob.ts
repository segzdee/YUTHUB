/**\n * Usage Alert Job\n * Sends email notifications when organizations approach their resource limits\n */\n\nimport { db } from '../db';\nimport { organizations, users } from '@shared/schema';\nimport { eq, gte, and, sql } from 'drizzle-orm';\nimport nodemailer from 'nodemailer';\nimport { LIMIT_ALERT_THRESHOLDS } from '../constants/subscriptionTiers';\n\n// Nodemailer transporter setup\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST,\n  port: parseInt(process.env.SMTP_PORT || '587'),\n  secure: process.env.SMTP_SECURE === 'true',\n  auth: {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASSWORD,\n  },\n});\n\ninterface UsageAlert {\n  organizationId: number;\n  organizationName: string;\n  subscriptionTier: string;\n  billingEmail: string;\n  currentResidentCount: number;\n  maxResidents: number;\n  residentUsagePercent: number;\n  currentPropertyCount: number;\n  maxProperties: number;\n  propertyUsagePercent: number;\n  residentAlertLevel: string;\n  propertyAlertLevel: string;\n}\n\n/**\n * Get all organizations with usage alerts that need to be sent\n */\nasync function getOrganizationsWithAlerts(): Promise<UsageAlert[]> {\n  const result = await db.execute(\n    sql`\n      SELECT\n        o.id as organization_id,\n        o.name as organization_name,\n        o.subscription_tier,\n        o.billing_email,\n        o.current_resident_count,\n        o.max_residents,\n        ROUND((o.current_resident_count::float / NULLIF(o.max_residents, 0)) * 100, 2) as resident_usage_percent,\n        o.current_property_count,\n        o.max_properties,\n        ROUND((o.current_property_count::float / NULLIF(o.max_properties, 0)) * 100, 2) as property_usage_percent,\n        CASE\n          WHEN (o.current_resident_count::float / NULLIF(o.max_residents, 0)) >= 0.95 THEN 'CRITICAL'\n          WHEN (o.current_resident_count::float / NULLIF(o.max_residents, 0)) >= 0.8 THEN 'WARNING'\n          ELSE 'OK'\n        END as resident_alert_level,\n        CASE\n          WHEN (o.current_property_count::float / NULLIF(o.max_properties, 0)) >= 0.95 THEN 'CRITICAL'\n          WHEN (o.current_property_count::float / NULLIF(o.max_properties, 0)) >= 0.8 THEN 'WARNING'\n          ELSE 'OK'\n        END as property_alert_level\n      FROM organizations o\n      WHERE\n        (o.subscription_status = 'active' OR o.subscription_status = 'trial')\n        AND o.billing_email IS NOT NULL\n        AND (\n          (o.max_residents > 0 AND o.current_resident_count::float / o.max_residents >= ${LIMIT_ALERT_THRESHOLDS.warning})\n          OR\n          (o.max_properties > 0 AND o.current_property_count::float / o.max_properties >= ${LIMIT_ALERT_THRESHOLDS.warning})\n        )\n      ORDER BY GREATEST(\n        o.current_resident_count::float / NULLIF(o.max_residents, 0),\n        o.current_property_count::float / NULLIF(o.max_properties, 0)\n      ) DESC\n    `\n  );\n\n  return (result.rows || []) as UsageAlert[];\n}\n\n/**\n * Format alert email HTML\n */\nfunction formatAlertEmail(alert: UsageAlert): string {\n  const residentWarning =\n    alert.maxResidents > 0 && alert.residentUsagePercent >= 80\n      ? `\n        <div style=\"padding: 15px; background-color: ${alert.residentAlertLevel === 'CRITICAL' ? '#fee' : '#fef3cd'}; border-radius: 5px; margin: 10px 0;\">\n          <strong>‚ö†Ô∏è Resident Capacity Alert</strong><br/>\n          You have ${alert.currentResidentCount} of ${alert.maxResidents} residents (${alert.residentUsagePercent}%).\n          ${alert.residentAlertLevel === 'CRITICAL' ? '<br/>üö® <strong>CRITICAL</strong> - You are at 95% capacity. Consider upgrading immediately.' : ''}\n        </div>\n      `\n      : '';\n\n  const propertyWarning =\n    alert.maxProperties > 0 && alert.propertyUsagePercent >= 80\n      ? `\n        <div style=\"padding: 15px; background-color: ${alert.propertyAlertLevel === 'CRITICAL' ? '#fee' : '#fef3cd'}; border-radius: 5px; margin: 10px 0;\">\n          <strong>‚ö†Ô∏è Property Capacity Alert</strong><br/>\n          You have ${alert.currentPropertyCount} of ${alert.maxProperties} properties (${alert.propertyUsagePercent}%).\n          ${alert.propertyAlertLevel === 'CRITICAL' ? '<br/>üö® <strong>CRITICAL</strong> - You are at 95% capacity. Consider upgrading immediately.' : ''}\n        </div>\n      `\n      : '';\n\n  return `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }\n          .content { margin-bottom: 20px; }\n          .button { display: inline-block; background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin-top: 10px; }\n          .footer { background-color: #f8f9fa; padding: 15px; border-radius: 5px; font-size: 12px; color: #666; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h2>Usage Alert for ${alert.organizationName}</h2>\n            <p>You're receiving this email because your organization is approaching resource limits.</p>\n          </div>\n          \n          <div class=\"content\">\n            <p>Dear Administrator,</p>\n            <p>Your <strong>${alert.subscriptionTier}</strong> plan has the following limits:</p>\n            \n            ${residentWarning}\n            ${propertyWarning}\n            \n            <h3>Current Plan Limits:</h3>\n            <ul>\n              <li><strong>Residents:</strong> ${alert.maxResidents === -1 ? 'Unlimited' : alert.maxResidents} allowed</li>\n              <li><strong>Properties:</strong> ${alert.maxProperties === -1 ? 'Unlimited' : alert.maxProperties} allowed</li>\n            </ul>\n            \n            <h3>Upgrade to add more capacity:</h3>\n            <ul>\n              <li><strong>Professional Plan:</strong> 100 residents, 5 properties - ¬£499/month</li>\n              <li><strong>Enterprise Plan:</strong> Unlimited residents and properties - ¬£1,299/month</li>\n            </ul>\n            \n            <a href=\"${process.env.FRONTEND_URL || 'http://localhost:3000'}/app/settings/billing\" class=\"button\">Upgrade Plan</a>\n          </div>\n          \n          <div class=\"footer\">\n            <p>Questions? Contact our support team at support@yuthub.co.uk or visit our help center.</p>\n            <p>This is an automated alert from YUTHUB. Please do not reply to this email.</p>\n          </div>\n        </div>\n      </body>\n    </html>\n  `;\n}\n\n/**\n * Send alert email for an organization\n */\nasync function sendAlertEmail(alert: UsageAlert): Promise<boolean> {\n  try {\n    const subject =\n      alert.residentAlertLevel === 'CRITICAL' || alert.propertyAlertLevel === 'CRITICAL'\n        ? `üö® CRITICAL: ${alert.organizationName} approaching capacity limits`\n        : `‚ö†Ô∏è Warning: ${alert.organizationName} approaching capacity limits`;\n\n    await transporter.sendMail({\n      from: process.env.EMAIL_FROM || 'noreply@yuthub.co.uk',\n      to: alert.billingEmail,\n      subject,\n      html: formatAlertEmail(alert),\n    });\n\n    return true;\n  } catch (error) {\n    console.error(`Failed to send alert email to ${alert.organizationName}:`, error);\n    return false;\n  }\n}\n\n/**\n * Update alert sent timestamp in database\n */\nasync function updateAlertSentDate(organizationId: number): Promise<void> {\n  await db\n    .update(organizations)\n    .set({\n      lastUsageAlertDate: new Date(),\n      usageAlertSent: true,\n    })\n    .where(eq(organizations.id, organizationId));\n}\n\n/**\n * Main job: Process all usage alerts\n */\nexport async function processUsageAlerts(): Promise<void> {\n  console.log('[UsageAlertJob] Starting usage alert processing...');\n\n  try {\n    const alerts = await getOrganizationsWithAlerts();\n    console.log(`[UsageAlertJob] Found ${alerts.length} organizations with usage alerts`);\n\n    let successCount = 0;\n    let failureCount = 0;\n\n    for (const alert of alerts) {\n      const emailSent = await sendAlertEmail(alert);\n\n      if (emailSent) {\n        await updateAlertSentDate(alert.organizationId);\n        successCount++;\n        console.log(\n          `[UsageAlertJob] Alert sent to ${alert.organizationName} (${alert.residentUsagePercent}% resident usage)`\n        );\n      } else {\n        failureCount++;\n        console.error(`[UsageAlertJob] Failed to send alert for ${alert.organizationName}`);\n      }\n    }\n\n    console.log(\n      `[UsageAlertJob] Completed: ${successCount} sent, ${failureCount} failed`\n    );\n  } catch (error) {\n    console.error('[UsageAlertJob] Fatal error:', error);\n  }\n}\n\n/**\n * Schedule the job to run periodically (every hour)\n */\nexport function scheduleUsageAlertJob(): void {\n  console.log('[UsageAlertJob] Scheduling usage alert job to run hourly');\n\n  // Run immediately on startup\n  processUsageAlerts().catch(console.error);\n\n  // Run every hour\n  setInterval(() => {\n    processUsageAlerts().catch(console.error);\n  }, 60 * 60 * 1000);\n}\n"